<program>        ::= <declaration_list>

<declaration_list> ::= <declaration> <declaration_list>
                    | ε

<declaration>    ::= <var_declaration>
                   | <fun_declaration>

<var_declaration> ::= <type_specifier> <identifier> ';'

<type_specifier> ::= 'int' | 'float' | 'char' | 'void'

<fun_declaration> ::= <type_specifier> <identifier> '(' <params> ')' <compound_stmt>

<params>         ::= <param_list>
                   | 'void'
                   | ε

<param_list>     ::= <param> ',' <param_list>
                   | <param>

<param>          ::= <type_specifier> <identifier>

<compound_stmt>  ::= '{' <local_declarations> <statement_list> '}'

<local_declarations> ::= <var_declaration> <local_declarations>
                       | ε

<statement_list> ::= <statement> <statement_list>
                   | ε

<statement>      ::= <expression_stmt>
                   | <compound_stmt>
                   | <selection_stmt>
                   | <iteration_stmt>
                   | <return_stmt>

<expression_stmt> ::= <expression> ';'
                    | ';'

<selection_stmt> ::= 'if' '(' <expression> ')' <statement>
                   | 'if' '(' <expression> ')' <statement> 'else' <statement>

<iteration_stmt> ::= 'while' '(' <expression> ')' <statement>

<return_stmt>    ::= 'return' ';'
                   | 'return' <expression> ';'

<expression>     ::= <identifier> '=' <expression>
                   | <simple_expression>

<simple_expression> ::= <additive_expression> <relop> <additive_expression>
                      | <additive_expression>

<relop>          ::= '<=' | '<' | '>' | '>=' | '==' | '!='

<additive_expression> ::= <additive_expression> <addop> <term>
                        | <term>

<addop>          ::= '+' | '-'

<term>           ::= <term> <mulop> <factor>
                  | <factor>

<mulop>          ::= '*' | '/'

<factor>         ::= '(' <expression> ')'
                  | <identifier>
                  | <call>
                  | <number>

<call>           ::= <identifier> '(' <args> ')'

<args>           ::= <arg_list>
                   | ε

<arg_list>       ::= <expression> ',' <arg_list>
                   | <expression>

<identifier>     ::= [a-zA-Z_][a-zA-Z0-9_]*

<number>         ::= [0-9]+